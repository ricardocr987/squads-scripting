/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBatchAccountsCloseInstruction,
  type ParsedBatchAddTransactionInstruction,
  type ParsedBatchCreateInstruction,
  type ParsedBatchExecuteTransactionInstruction,
  type ParsedConfigTransactionAccountsCloseInstruction,
  type ParsedConfigTransactionCreateInstruction,
  type ParsedConfigTransactionExecuteInstruction,
  type ParsedMultisigAddMemberInstruction,
  type ParsedMultisigAddSpendingLimitInstruction,
  type ParsedMultisigChangeThresholdInstruction,
  type ParsedMultisigCreateInstruction,
  type ParsedMultisigCreateV2Instruction,
  type ParsedMultisigRemoveMemberInstruction,
  type ParsedMultisigRemoveSpendingLimitInstruction,
  type ParsedMultisigSetConfigAuthorityInstruction,
  type ParsedMultisigSetRentCollectorInstruction,
  type ParsedMultisigSetTimeLockInstruction,
  type ParsedProgramConfigInitInstruction,
  type ParsedProgramConfigSetAuthorityInstruction,
  type ParsedProgramConfigSetMultisigCreationFeeInstruction,
  type ParsedProgramConfigSetTreasuryInstruction,
  type ParsedProposalActivateInstruction,
  type ParsedProposalApproveInstruction,
  type ParsedProposalCancelInstruction,
  type ParsedProposalCancelV2Instruction,
  type ParsedProposalCreateInstruction,
  type ParsedProposalRejectInstruction,
  type ParsedSpendingLimitUseInstruction,
  type ParsedTransactionBufferCloseInstruction,
  type ParsedTransactionBufferCreateInstruction,
  type ParsedTransactionBufferExtendInstruction,
  type ParsedVaultBatchTransactionAccountCloseInstruction,
  type ParsedVaultTransactionAccountsCloseInstruction,
  type ParsedVaultTransactionCreateFromBufferInstruction,
  type ParsedVaultTransactionCreateInstruction,
  type ParsedVaultTransactionExecuteInstruction,
} from '../instructions';

export const SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS =
  'SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf' as Address<'SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf'>;

export enum SquadsMultisigProgramAccount {
  Batch,
  VaultBatchTransaction,
  ConfigTransaction,
  Multisig,
  ProgramConfig,
  Proposal,
  SpendingLimit,
  TransactionBuffer,
  VaultTransaction,
}

export function identifySquadsMultisigProgramAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SquadsMultisigProgramAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 194, 70, 44, 22, 88, 137, 44])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.Batch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 121, 46, 36, 12, 19, 252, 7])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.VaultBatchTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 8, 4, 35, 113, 139, 139, 112])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.ConfigTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 116, 121, 186, 68, 161, 79, 236])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.Multisig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 210, 90, 231, 144, 149, 140, 63])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.ProgramConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([26, 94, 189, 187, 116, 136, 53, 33])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.Proposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 201, 27, 160, 218, 195, 222, 152])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.SpendingLimit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 36, 35, 219, 93, 225, 110, 96])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.TransactionBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 250, 162, 100, 81, 14, 162, 207])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramAccount.VaultTransaction;
  }
  throw new Error(
    'The provided account could not be identified as a squadsMultisigProgram account.'
  );
}

export enum SquadsMultisigProgramInstruction {
  ProgramConfigInit,
  ProgramConfigSetAuthority,
  ProgramConfigSetMultisigCreationFee,
  ProgramConfigSetTreasury,
  MultisigCreate,
  MultisigCreateV2,
  MultisigAddMember,
  MultisigRemoveMember,
  MultisigSetTimeLock,
  MultisigChangeThreshold,
  MultisigSetConfigAuthority,
  MultisigSetRentCollector,
  MultisigAddSpendingLimit,
  MultisigRemoveSpendingLimit,
  ConfigTransactionCreate,
  ConfigTransactionExecute,
  VaultTransactionCreate,
  TransactionBufferCreate,
  TransactionBufferClose,
  TransactionBufferExtend,
  VaultTransactionCreateFromBuffer,
  VaultTransactionExecute,
  BatchCreate,
  BatchAddTransaction,
  BatchExecuteTransaction,
  ProposalCreate,
  ProposalActivate,
  ProposalApprove,
  ProposalReject,
  ProposalCancel,
  ProposalCancelV2,
  SpendingLimitUse,
  ConfigTransactionAccountsClose,
  VaultTransactionAccountsClose,
  VaultBatchTransactionAccountClose,
  BatchAccountsClose,
}

export function identifySquadsMultisigProgramInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): SquadsMultisigProgramInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([184, 188, 198, 195, 205, 124, 117, 216])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProgramConfigInit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 242, 36, 181, 32, 143, 216, 75])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProgramConfigSetAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([101, 160, 249, 63, 154, 215, 153, 13])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProgramConfigSetMultisigCreationFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 46, 243, 117, 144, 188, 162, 107])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProgramConfigSetTreasury;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([122, 77, 80, 159, 84, 88, 90, 197])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigCreate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([50, 221, 199, 93, 40, 245, 139, 233])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigCreateV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([1, 219, 215, 108, 184, 229, 214, 8])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigAddMember;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([217, 117, 177, 210, 182, 145, 218, 72])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigRemoveMember;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([148, 154, 121, 77, 212, 254, 155, 72])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigSetTimeLock;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([141, 42, 15, 126, 169, 92, 62, 181])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigChangeThreshold;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 93, 199, 143, 92, 169, 193, 232])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigSetConfigAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 204, 65, 57, 210, 70, 156, 74])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigSetRentCollector;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 242, 159, 42, 86, 197, 89, 115])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigAddSpendingLimit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 198, 136, 111, 123, 4, 178, 113])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.MultisigRemoveSpendingLimit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 236, 87, 228, 137, 75, 81, 39])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ConfigTransactionCreate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 146, 244, 189, 252, 140, 36, 40])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ConfigTransactionExecute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 250, 78, 168, 208, 226, 218, 211])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.VaultTransactionCreate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 201, 113, 108, 37, 63, 29, 89])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.TransactionBufferCreate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 182, 208, 228, 136, 24, 178, 102])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.TransactionBufferClose;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([230, 157, 67, 56, 5, 238, 245, 146])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.TransactionBufferExtend;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([222, 54, 149, 68, 87, 246, 48, 231])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.VaultTransactionCreateFromBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 8, 161, 87, 153, 164, 25, 171])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.VaultTransactionExecute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 142, 141, 17, 55, 185, 20, 248])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.BatchCreate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([89, 100, 224, 18, 69, 70, 54, 76])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.BatchAddTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 44, 179, 152, 21, 127, 234, 180])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.BatchExecuteTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([220, 60, 73, 224, 30, 108, 79, 159])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProposalCreate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 34, 92, 248, 154, 27, 51, 106])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProposalActivate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 37, 164, 136, 188, 216, 42, 248])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProposalApprove;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([243, 62, 134, 156, 230, 106, 246, 135])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProposalReject;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 42, 127, 237, 38, 163, 84, 203])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProposalCancel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([205, 41, 194, 61, 220, 139, 16, 247])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ProposalCancelV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([16, 57, 130, 127, 193, 20, 155, 134])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.SpendingLimitUse;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 203, 84, 53, 151, 112, 187, 186])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.ConfigTransactionAccountsClose;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 71, 187, 176, 2, 35, 170, 165])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.VaultTransactionAccountsClose;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([134, 18, 19, 106, 129, 68, 97, 247])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.VaultBatchTransactionAccountClose;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([218, 196, 7, 175, 130, 102, 11, 255])
      ),
      0
    )
  ) {
    return SquadsMultisigProgramInstruction.BatchAccountsClose;
  }
  throw new Error(
    'The provided instruction could not be identified as a squadsMultisigProgram instruction.'
  );
}

export type ParsedSquadsMultisigProgramInstruction<
  TProgram extends string = 'SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf',
> =
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProgramConfigInit;
    } & ParsedProgramConfigInitInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProgramConfigSetAuthority;
    } & ParsedProgramConfigSetAuthorityInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProgramConfigSetMultisigCreationFee;
    } & ParsedProgramConfigSetMultisigCreationFeeInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProgramConfigSetTreasury;
    } & ParsedProgramConfigSetTreasuryInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigCreate;
    } & ParsedMultisigCreateInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigCreateV2;
    } & ParsedMultisigCreateV2Instruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigAddMember;
    } & ParsedMultisigAddMemberInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigRemoveMember;
    } & ParsedMultisigRemoveMemberInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigSetTimeLock;
    } & ParsedMultisigSetTimeLockInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigChangeThreshold;
    } & ParsedMultisigChangeThresholdInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigSetConfigAuthority;
    } & ParsedMultisigSetConfigAuthorityInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigSetRentCollector;
    } & ParsedMultisigSetRentCollectorInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigAddSpendingLimit;
    } & ParsedMultisigAddSpendingLimitInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.MultisigRemoveSpendingLimit;
    } & ParsedMultisigRemoveSpendingLimitInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ConfigTransactionCreate;
    } & ParsedConfigTransactionCreateInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ConfigTransactionExecute;
    } & ParsedConfigTransactionExecuteInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.VaultTransactionCreate;
    } & ParsedVaultTransactionCreateInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.TransactionBufferCreate;
    } & ParsedTransactionBufferCreateInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.TransactionBufferClose;
    } & ParsedTransactionBufferCloseInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.TransactionBufferExtend;
    } & ParsedTransactionBufferExtendInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.VaultTransactionCreateFromBuffer;
    } & ParsedVaultTransactionCreateFromBufferInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.VaultTransactionExecute;
    } & ParsedVaultTransactionExecuteInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.BatchCreate;
    } & ParsedBatchCreateInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.BatchAddTransaction;
    } & ParsedBatchAddTransactionInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.BatchExecuteTransaction;
    } & ParsedBatchExecuteTransactionInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProposalCreate;
    } & ParsedProposalCreateInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProposalActivate;
    } & ParsedProposalActivateInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProposalApprove;
    } & ParsedProposalApproveInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProposalReject;
    } & ParsedProposalRejectInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProposalCancel;
    } & ParsedProposalCancelInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ProposalCancelV2;
    } & ParsedProposalCancelV2Instruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.SpendingLimitUse;
    } & ParsedSpendingLimitUseInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.ConfigTransactionAccountsClose;
    } & ParsedConfigTransactionAccountsCloseInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.VaultTransactionAccountsClose;
    } & ParsedVaultTransactionAccountsCloseInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.VaultBatchTransactionAccountClose;
    } & ParsedVaultBatchTransactionAccountCloseInstruction<TProgram>)
  | ({
      instructionType: SquadsMultisigProgramInstruction.BatchAccountsClose;
    } & ParsedBatchAccountsCloseInstruction<TProgram>);
