/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getMemberDecoder,
  getMemberEncoder,
  getPeriodDecoder,
  getPeriodEncoder,
  type Member,
  type MemberArgs,
  type Period,
  type PeriodArgs,
} from '.';

export type ConfigAction =
  | { __kind: 'AddMember'; newMember: Member }
  | { __kind: 'RemoveMember'; oldMember: Address }
  | { __kind: 'ChangeThreshold'; newThreshold: number }
  | { __kind: 'SetTimeLock'; newTimeLock: number }
  | {
      __kind: 'AddSpendingLimit';
      /** Key that is used to seed the SpendingLimit PDA. */
      createKey: Address;
      /** The index of the vault that the spending limit is for. */
      vaultIndex: number;
      /** The token mint the spending limit is for. */
      mint: Address;
      /**
       * The amount of tokens that can be spent in a period.
       * This amount is in decimals of the mint,
       * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
       */
      amount: bigint;
      /**
       * The reset period of the spending limit.
       * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
       */
      period: Period;
      /**
       * Members of the multisig that can use the spending limit.
       * In case a member is removed from the multisig, the spending limit will remain existent
       * (until explicitly deleted), but the removed member will not be able to use it anymore.
       */
      members: Array<Address>;
      /**
       * The destination addresses the spending limit is allowed to sent funds to.
       * If empty, funds can be sent to any address.
       */
      destinations: Array<Address>;
    }
  | { __kind: 'RemoveSpendingLimit'; spendingLimit: Address }
  | { __kind: 'SetRentCollector'; newRentCollector: Option<Address> };

export type ConfigActionArgs =
  | { __kind: 'AddMember'; newMember: MemberArgs }
  | { __kind: 'RemoveMember'; oldMember: Address }
  | { __kind: 'ChangeThreshold'; newThreshold: number }
  | { __kind: 'SetTimeLock'; newTimeLock: number }
  | {
      __kind: 'AddSpendingLimit';
      /** Key that is used to seed the SpendingLimit PDA. */
      createKey: Address;
      /** The index of the vault that the spending limit is for. */
      vaultIndex: number;
      /** The token mint the spending limit is for. */
      mint: Address;
      /**
       * The amount of tokens that can be spent in a period.
       * This amount is in decimals of the mint,
       * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
       */
      amount: number | bigint;
      /**
       * The reset period of the spending limit.
       * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
       */
      period: PeriodArgs;
      /**
       * Members of the multisig that can use the spending limit.
       * In case a member is removed from the multisig, the spending limit will remain existent
       * (until explicitly deleted), but the removed member will not be able to use it anymore.
       */
      members: Array<Address>;
      /**
       * The destination addresses the spending limit is allowed to sent funds to.
       * If empty, funds can be sent to any address.
       */
      destinations: Array<Address>;
    }
  | { __kind: 'RemoveSpendingLimit'; spendingLimit: Address }
  | { __kind: 'SetRentCollector'; newRentCollector: OptionOrNullable<Address> };

export function getConfigActionEncoder(): Encoder<ConfigActionArgs> {
  return getDiscriminatedUnionEncoder([
    ['AddMember', getStructEncoder([['newMember', getMemberEncoder()]])],
    ['RemoveMember', getStructEncoder([['oldMember', getAddressEncoder()]])],
    ['ChangeThreshold', getStructEncoder([['newThreshold', getU16Encoder()]])],
    ['SetTimeLock', getStructEncoder([['newTimeLock', getU32Encoder()]])],
    [
      'AddSpendingLimit',
      getStructEncoder([
        ['createKey', getAddressEncoder()],
        ['vaultIndex', getU8Encoder()],
        ['mint', getAddressEncoder()],
        ['amount', getU64Encoder()],
        ['period', getPeriodEncoder()],
        ['members', getArrayEncoder(getAddressEncoder())],
        ['destinations', getArrayEncoder(getAddressEncoder())],
      ]),
    ],
    [
      'RemoveSpendingLimit',
      getStructEncoder([['spendingLimit', getAddressEncoder()]]),
    ],
    [
      'SetRentCollector',
      getStructEncoder([
        ['newRentCollector', getOptionEncoder(getAddressEncoder())],
      ]),
    ],
  ]);
}

export function getConfigActionDecoder(): Decoder<ConfigAction> {
  return getDiscriminatedUnionDecoder([
    ['AddMember', getStructDecoder([['newMember', getMemberDecoder()]])],
    ['RemoveMember', getStructDecoder([['oldMember', getAddressDecoder()]])],
    ['ChangeThreshold', getStructDecoder([['newThreshold', getU16Decoder()]])],
    ['SetTimeLock', getStructDecoder([['newTimeLock', getU32Decoder()]])],
    [
      'AddSpendingLimit',
      getStructDecoder([
        ['createKey', getAddressDecoder()],
        ['vaultIndex', getU8Decoder()],
        ['mint', getAddressDecoder()],
        ['amount', getU64Decoder()],
        ['period', getPeriodDecoder()],
        ['members', getArrayDecoder(getAddressDecoder())],
        ['destinations', getArrayDecoder(getAddressDecoder())],
      ]),
    ],
    [
      'RemoveSpendingLimit',
      getStructDecoder([['spendingLimit', getAddressDecoder()]]),
    ],
    [
      'SetRentCollector',
      getStructDecoder([
        ['newRentCollector', getOptionDecoder(getAddressDecoder())],
      ]),
    ],
  ]);
}

export function getConfigActionCodec(): Codec<ConfigActionArgs, ConfigAction> {
  return combineCodec(getConfigActionEncoder(), getConfigActionDecoder());
}

// Data Enum Helpers.
export function configAction(
  kind: 'AddMember',
  data: GetDiscriminatedUnionVariantContent<
    ConfigActionArgs,
    '__kind',
    'AddMember'
  >
): GetDiscriminatedUnionVariant<ConfigActionArgs, '__kind', 'AddMember'>;
export function configAction(
  kind: 'RemoveMember',
  data: GetDiscriminatedUnionVariantContent<
    ConfigActionArgs,
    '__kind',
    'RemoveMember'
  >
): GetDiscriminatedUnionVariant<ConfigActionArgs, '__kind', 'RemoveMember'>;
export function configAction(
  kind: 'ChangeThreshold',
  data: GetDiscriminatedUnionVariantContent<
    ConfigActionArgs,
    '__kind',
    'ChangeThreshold'
  >
): GetDiscriminatedUnionVariant<ConfigActionArgs, '__kind', 'ChangeThreshold'>;
export function configAction(
  kind: 'SetTimeLock',
  data: GetDiscriminatedUnionVariantContent<
    ConfigActionArgs,
    '__kind',
    'SetTimeLock'
  >
): GetDiscriminatedUnionVariant<ConfigActionArgs, '__kind', 'SetTimeLock'>;
export function configAction(
  kind: 'AddSpendingLimit',
  data: GetDiscriminatedUnionVariantContent<
    ConfigActionArgs,
    '__kind',
    'AddSpendingLimit'
  >
): GetDiscriminatedUnionVariant<ConfigActionArgs, '__kind', 'AddSpendingLimit'>;
export function configAction(
  kind: 'RemoveSpendingLimit',
  data: GetDiscriminatedUnionVariantContent<
    ConfigActionArgs,
    '__kind',
    'RemoveSpendingLimit'
  >
): GetDiscriminatedUnionVariant<
  ConfigActionArgs,
  '__kind',
  'RemoveSpendingLimit'
>;
export function configAction(
  kind: 'SetRentCollector',
  data: GetDiscriminatedUnionVariantContent<
    ConfigActionArgs,
    '__kind',
    'SetRentCollector'
  >
): GetDiscriminatedUnionVariant<ConfigActionArgs, '__kind', 'SetRentCollector'>;
export function configAction<K extends ConfigActionArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isConfigAction<K extends ConfigAction['__kind']>(
  kind: K,
  value: ConfigAction
): value is ConfigAction & { __kind: K } {
  return value.__kind === kind;
}
