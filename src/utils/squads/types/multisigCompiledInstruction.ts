/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

/**
 * Concise serialization schema for instructions that make up a transaction.
 * Closely mimics the Solana transaction wire format.
 */

export type MultisigCompiledInstruction = {
  programIdIndex: number;
  /** Indices into the tx's `account_keys` list indicating which accounts to pass to the instruction. */
  accountIndexes: ReadonlyUint8Array;
  /** Instruction data. */
  data: ReadonlyUint8Array;
};

export type MultisigCompiledInstructionArgs = MultisigCompiledInstruction;

export function getMultisigCompiledInstructionEncoder(): Encoder<MultisigCompiledInstructionArgs> {
  return getStructEncoder([
    ['programIdIndex', getU8Encoder()],
    [
      'accountIndexes',
      addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
    ],
    ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
  ]);
}

export function getMultisigCompiledInstructionDecoder(): Decoder<MultisigCompiledInstruction> {
  return getStructDecoder([
    ['programIdIndex', getU8Decoder()],
    [
      'accountIndexes',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getMultisigCompiledInstructionCodec(): Codec<
  MultisigCompiledInstructionArgs,
  MultisigCompiledInstruction
> {
  return combineCodec(
    getMultisigCompiledInstructionEncoder(),
    getMultisigCompiledInstructionDecoder()
  );
}
