/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getPeriodDecoder,
  getPeriodEncoder,
  type Period,
  type PeriodArgs,
} from '../types';

export const MULTISIG_ADD_SPENDING_LIMIT_DISCRIMINATOR = new Uint8Array([
  11, 242, 159, 42, 86, 197, 89, 115,
]);

export function getMultisigAddSpendingLimitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MULTISIG_ADD_SPENDING_LIMIT_DISCRIMINATOR
  );
}

export type MultisigAddSpendingLimitInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountConfigAuthority extends string | AccountMeta<string> = string,
  TAccountSpendingLimit extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? ReadonlyAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountConfigAuthority extends string
        ? ReadonlySignerAccount<TAccountConfigAuthority> &
            AccountSignerMeta<TAccountConfigAuthority>
        : TAccountConfigAuthority,
      TAccountSpendingLimit extends string
        ? WritableAccount<TAccountSpendingLimit>
        : TAccountSpendingLimit,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MultisigAddSpendingLimitInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Key that is used to seed the SpendingLimit PDA. */
  createKey: Address;
  /** The index of the vault that the spending limit is for. */
  vaultIndex: number;
  /** The token mint the spending limit is for. */
  mint: Address;
  /**
   * The amount of tokens that can be spent in a period.
   * This amount is in decimals of the mint,
   * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
   */
  amount: bigint;
  /**
   * The reset period of the spending limit.
   * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
   */
  period: Period;
  /**
   * Members of the Spending Limit that can use it.
   * Don't have to be members of the multisig.
   */
  members: Array<Address>;
  /**
   * The destination addresses the spending limit is allowed to sent funds to.
   * If empty, funds can be sent to any address.
   */
  destinations: Array<Address>;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type MultisigAddSpendingLimitInstructionDataArgs = {
  /** Key that is used to seed the SpendingLimit PDA. */
  createKey: Address;
  /** The index of the vault that the spending limit is for. */
  vaultIndex: number;
  /** The token mint the spending limit is for. */
  mint: Address;
  /**
   * The amount of tokens that can be spent in a period.
   * This amount is in decimals of the mint,
   * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
   */
  amount: number | bigint;
  /**
   * The reset period of the spending limit.
   * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
   */
  period: PeriodArgs;
  /**
   * Members of the Spending Limit that can use it.
   * Don't have to be members of the multisig.
   */
  members: Array<Address>;
  /**
   * The destination addresses the spending limit is allowed to sent funds to.
   * If empty, funds can be sent to any address.
   */
  destinations: Array<Address>;
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getMultisigAddSpendingLimitInstructionDataEncoder(): Encoder<MultisigAddSpendingLimitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['createKey', getAddressEncoder()],
      ['vaultIndex', getU8Encoder()],
      ['mint', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['period', getPeriodEncoder()],
      ['members', getArrayEncoder(getAddressEncoder())],
      ['destinations', getArrayEncoder(getAddressEncoder())],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: MULTISIG_ADD_SPENDING_LIMIT_DISCRIMINATOR,
    })
  );
}

export function getMultisigAddSpendingLimitInstructionDataDecoder(): Decoder<MultisigAddSpendingLimitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['createKey', getAddressDecoder()],
    ['vaultIndex', getU8Decoder()],
    ['mint', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['period', getPeriodDecoder()],
    ['members', getArrayDecoder(getAddressDecoder())],
    ['destinations', getArrayDecoder(getAddressDecoder())],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getMultisigAddSpendingLimitInstructionDataCodec(): Codec<
  MultisigAddSpendingLimitInstructionDataArgs,
  MultisigAddSpendingLimitInstructionData
> {
  return combineCodec(
    getMultisigAddSpendingLimitInstructionDataEncoder(),
    getMultisigAddSpendingLimitInstructionDataDecoder()
  );
}

export type MultisigAddSpendingLimitInput<
  TAccountMultisig extends string = string,
  TAccountConfigAuthority extends string = string,
  TAccountSpendingLimit extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  /** Multisig `config_authority` that must authorize the configuration change. */
  configAuthority: TransactionSigner<TAccountConfigAuthority>;
  spendingLimit: Address<TAccountSpendingLimit>;
  /** This is usually the same as `config_authority`, but can be a different account if needed. */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  createKey: MultisigAddSpendingLimitInstructionDataArgs['createKey'];
  vaultIndex: MultisigAddSpendingLimitInstructionDataArgs['vaultIndex'];
  mint: MultisigAddSpendingLimitInstructionDataArgs['mint'];
  amount: MultisigAddSpendingLimitInstructionDataArgs['amount'];
  period: MultisigAddSpendingLimitInstructionDataArgs['period'];
  members: MultisigAddSpendingLimitInstructionDataArgs['members'];
  destinations: MultisigAddSpendingLimitInstructionDataArgs['destinations'];
  memo: MultisigAddSpendingLimitInstructionDataArgs['memo'];
};

export function getMultisigAddSpendingLimitInstruction<
  TAccountMultisig extends string,
  TAccountConfigAuthority extends string,
  TAccountSpendingLimit extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MultisigAddSpendingLimitInput<
    TAccountMultisig,
    TAccountConfigAuthority,
    TAccountSpendingLimit,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MultisigAddSpendingLimitInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountConfigAuthority,
  TAccountSpendingLimit,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: false },
    configAuthority: {
      value: input.configAuthority ?? null,
      isWritable: false,
    },
    spendingLimit: { value: input.spendingLimit ?? null, isWritable: true },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.configAuthority),
      getAccountMeta(accounts.spendingLimit),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMultisigAddSpendingLimitInstructionDataEncoder().encode(
      args as MultisigAddSpendingLimitInstructionDataArgs
    ),
  } as MultisigAddSpendingLimitInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountConfigAuthority,
    TAccountSpendingLimit,
    TAccountRentPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMultisigAddSpendingLimitInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    /** Multisig `config_authority` that must authorize the configuration change. */
    configAuthority: TAccountMetas[1];
    spendingLimit: TAccountMetas[2];
    /** This is usually the same as `config_authority`, but can be a different account if needed. */
    rentPayer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: MultisigAddSpendingLimitInstructionData;
};

export function parseMultisigAddSpendingLimitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMultisigAddSpendingLimitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      configAuthority: getNextAccount(),
      spendingLimit: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMultisigAddSpendingLimitInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
