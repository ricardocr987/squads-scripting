/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MULTISIG_CHANGE_THRESHOLD_DISCRIMINATOR = new Uint8Array([
  141, 42, 15, 126, 169, 92, 62, 181,
]);

export function getMultisigChangeThresholdDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MULTISIG_CHANGE_THRESHOLD_DISCRIMINATOR
  );
}

export type MultisigChangeThresholdInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountConfigAuthority extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? WritableAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountConfigAuthority extends string
        ? ReadonlySignerAccount<TAccountConfigAuthority> &
            AccountSignerMeta<TAccountConfigAuthority>
        : TAccountConfigAuthority,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MultisigChangeThresholdInstructionData = {
  discriminator: ReadonlyUint8Array;
  newThreshold: number;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type MultisigChangeThresholdInstructionDataArgs = {
  newThreshold: number;
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getMultisigChangeThresholdInstructionDataEncoder(): Encoder<MultisigChangeThresholdInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newThreshold', getU16Encoder()],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: MULTISIG_CHANGE_THRESHOLD_DISCRIMINATOR,
    })
  );
}

export function getMultisigChangeThresholdInstructionDataDecoder(): Decoder<MultisigChangeThresholdInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newThreshold', getU16Decoder()],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getMultisigChangeThresholdInstructionDataCodec(): Codec<
  MultisigChangeThresholdInstructionDataArgs,
  MultisigChangeThresholdInstructionData
> {
  return combineCodec(
    getMultisigChangeThresholdInstructionDataEncoder(),
    getMultisigChangeThresholdInstructionDataDecoder()
  );
}

export type MultisigChangeThresholdInput<
  TAccountMultisig extends string = string,
  TAccountConfigAuthority extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  /** Multisig `config_authority` that must authorize the configuration change. */
  configAuthority: TransactionSigner<TAccountConfigAuthority>;
  /**
   * The account that will be charged or credited in case the multisig account needs to reallocate space,
   * for example when adding a new member or a spending limit.
   * This is usually the same as `config_authority`, but can be a different account if needed.
   */
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  /** We might need it in case reallocation is needed. */
  systemProgram?: Address<TAccountSystemProgram>;
  newThreshold: MultisigChangeThresholdInstructionDataArgs['newThreshold'];
  memo: MultisigChangeThresholdInstructionDataArgs['memo'];
};

export function getMultisigChangeThresholdInstruction<
  TAccountMultisig extends string,
  TAccountConfigAuthority extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MultisigChangeThresholdInput<
    TAccountMultisig,
    TAccountConfigAuthority,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MultisigChangeThresholdInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountConfigAuthority,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
    configAuthority: {
      value: input.configAuthority ?? null,
      isWritable: false,
    },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.configAuthority),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMultisigChangeThresholdInstructionDataEncoder().encode(
      args as MultisigChangeThresholdInstructionDataArgs
    ),
  } as MultisigChangeThresholdInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountConfigAuthority,
    TAccountRentPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMultisigChangeThresholdInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    /** Multisig `config_authority` that must authorize the configuration change. */
    configAuthority: TAccountMetas[1];
    /**
     * The account that will be charged or credited in case the multisig account needs to reallocate space,
     * for example when adding a new member or a spending limit.
     * This is usually the same as `config_authority`, but can be a different account if needed.
     */

    rentPayer?: TAccountMetas[2] | undefined;
    /** We might need it in case reallocation is needed. */
    systemProgram?: TAccountMetas[3] | undefined;
  };
  data: MultisigChangeThresholdInstructionData;
};

export function parseMultisigChangeThresholdInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMultisigChangeThresholdInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      configAuthority: getNextAccount(),
      rentPayer: getNextOptionalAccount(),
      systemProgram: getNextOptionalAccount(),
    },
    data: getMultisigChangeThresholdInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
