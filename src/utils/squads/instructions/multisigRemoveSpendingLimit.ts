/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MULTISIG_REMOVE_SPENDING_LIMIT_DISCRIMINATOR = new Uint8Array([
  228, 198, 136, 111, 123, 4, 178, 113,
]);

export function getMultisigRemoveSpendingLimitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MULTISIG_REMOVE_SPENDING_LIMIT_DISCRIMINATOR
  );
}

export type MultisigRemoveSpendingLimitInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountConfigAuthority extends string | AccountMeta<string> = string,
  TAccountSpendingLimit extends string | AccountMeta<string> = string,
  TAccountRentCollector extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? ReadonlyAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountConfigAuthority extends string
        ? ReadonlySignerAccount<TAccountConfigAuthority> &
            AccountSignerMeta<TAccountConfigAuthority>
        : TAccountConfigAuthority,
      TAccountSpendingLimit extends string
        ? WritableAccount<TAccountSpendingLimit>
        : TAccountSpendingLimit,
      TAccountRentCollector extends string
        ? WritableAccount<TAccountRentCollector>
        : TAccountRentCollector,
      ...TRemainingAccounts,
    ]
  >;

export type MultisigRemoveSpendingLimitInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type MultisigRemoveSpendingLimitInstructionDataArgs = {
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getMultisigRemoveSpendingLimitInstructionDataEncoder(): Encoder<MultisigRemoveSpendingLimitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: MULTISIG_REMOVE_SPENDING_LIMIT_DISCRIMINATOR,
    })
  );
}

export function getMultisigRemoveSpendingLimitInstructionDataDecoder(): Decoder<MultisigRemoveSpendingLimitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getMultisigRemoveSpendingLimitInstructionDataCodec(): Codec<
  MultisigRemoveSpendingLimitInstructionDataArgs,
  MultisigRemoveSpendingLimitInstructionData
> {
  return combineCodec(
    getMultisigRemoveSpendingLimitInstructionDataEncoder(),
    getMultisigRemoveSpendingLimitInstructionDataDecoder()
  );
}

export type MultisigRemoveSpendingLimitInput<
  TAccountMultisig extends string = string,
  TAccountConfigAuthority extends string = string,
  TAccountSpendingLimit extends string = string,
  TAccountRentCollector extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  /** Multisig `config_authority` that must authorize the configuration change. */
  configAuthority: TransactionSigner<TAccountConfigAuthority>;
  spendingLimit: Address<TAccountSpendingLimit>;
  /** This is usually the same as `config_authority`, but can be a different account if needed. */
  rentCollector: Address<TAccountRentCollector>;
  memo: MultisigRemoveSpendingLimitInstructionDataArgs['memo'];
};

export function getMultisigRemoveSpendingLimitInstruction<
  TAccountMultisig extends string,
  TAccountConfigAuthority extends string,
  TAccountSpendingLimit extends string,
  TAccountRentCollector extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MultisigRemoveSpendingLimitInput<
    TAccountMultisig,
    TAccountConfigAuthority,
    TAccountSpendingLimit,
    TAccountRentCollector
  >,
  config?: { programAddress?: TProgramAddress }
): MultisigRemoveSpendingLimitInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountConfigAuthority,
  TAccountSpendingLimit,
  TAccountRentCollector
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: false },
    configAuthority: {
      value: input.configAuthority ?? null,
      isWritable: false,
    },
    spendingLimit: { value: input.spendingLimit ?? null, isWritable: true },
    rentCollector: { value: input.rentCollector ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.configAuthority),
      getAccountMeta(accounts.spendingLimit),
      getAccountMeta(accounts.rentCollector),
    ],
    programAddress,
    data: getMultisigRemoveSpendingLimitInstructionDataEncoder().encode(
      args as MultisigRemoveSpendingLimitInstructionDataArgs
    ),
  } as MultisigRemoveSpendingLimitInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountConfigAuthority,
    TAccountSpendingLimit,
    TAccountRentCollector
  >;

  return instruction;
}

export type ParsedMultisigRemoveSpendingLimitInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    /** Multisig `config_authority` that must authorize the configuration change. */
    configAuthority: TAccountMetas[1];
    spendingLimit: TAccountMetas[2];
    /** This is usually the same as `config_authority`, but can be a different account if needed. */
    rentCollector: TAccountMetas[3];
  };
  data: MultisigRemoveSpendingLimitInstructionData;
};

export function parseMultisigRemoveSpendingLimitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMultisigRemoveSpendingLimitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      configAuthority: getNextAccount(),
      spendingLimit: getNextAccount(),
      rentCollector: getNextAccount(),
    },
    data: getMultisigRemoveSpendingLimitInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
