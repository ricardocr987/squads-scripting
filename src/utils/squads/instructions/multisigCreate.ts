/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MULTISIG_CREATE_DISCRIMINATOR = new Uint8Array([
  122, 77, 80, 159, 84, 88, 90, 197,
]);

export function getMultisigCreateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MULTISIG_CREATE_DISCRIMINATOR
  );
}

export type MultisigCreateInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountNull extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountNull extends string
        ? ReadonlyAccount<TAccountNull>
        : TAccountNull,
      ...TRemainingAccounts,
    ]
  >;

export type MultisigCreateInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MultisigCreateInstructionDataArgs = {};

export function getMultisigCreateInstructionDataEncoder(): FixedSizeEncoder<MultisigCreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MULTISIG_CREATE_DISCRIMINATOR })
  );
}

export function getMultisigCreateInstructionDataDecoder(): FixedSizeDecoder<MultisigCreateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMultisigCreateInstructionDataCodec(): FixedSizeCodec<
  MultisigCreateInstructionDataArgs,
  MultisigCreateInstructionData
> {
  return combineCodec(
    getMultisigCreateInstructionDataEncoder(),
    getMultisigCreateInstructionDataDecoder()
  );
}

export type MultisigCreateInput<TAccountNull extends string = string> = {
  null: Address<TAccountNull>;
};

export function getMultisigCreateInstruction<
  TAccountNull extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MultisigCreateInput<TAccountNull>,
  config?: { programAddress?: TProgramAddress }
): MultisigCreateInstruction<TProgramAddress, TAccountNull> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    null: { value: input.null ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.null)],
    programAddress,
    data: getMultisigCreateInstructionDataEncoder().encode({}),
  } as MultisigCreateInstruction<TProgramAddress, TAccountNull>;

  return instruction;
}

export type ParsedMultisigCreateInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    null: TAccountMetas[0];
  };
  data: MultisigCreateInstructionData;
};

export function parseMultisigCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMultisigCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      null: getNextAccount(),
    },
    data: getMultisigCreateInstructionDataDecoder().decode(instruction.data),
  };
}
