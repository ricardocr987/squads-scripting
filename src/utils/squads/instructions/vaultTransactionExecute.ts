/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const VAULT_TRANSACTION_EXECUTE_DISCRIMINATOR = new Uint8Array([
  194, 8, 161, 87, 153, 164, 25, 171,
]);

export function getVaultTransactionExecuteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VAULT_TRANSACTION_EXECUTE_DISCRIMINATOR
  );
}

export type VaultTransactionExecuteInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountTransaction extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? ReadonlyAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountTransaction extends string
        ? ReadonlyAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountMember extends string
        ? ReadonlySignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      ...TRemainingAccounts,
    ]
  >;

export type VaultTransactionExecuteInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type VaultTransactionExecuteInstructionDataArgs = {};

export function getVaultTransactionExecuteInstructionDataEncoder(): FixedSizeEncoder<VaultTransactionExecuteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: VAULT_TRANSACTION_EXECUTE_DISCRIMINATOR,
    })
  );
}

export function getVaultTransactionExecuteInstructionDataDecoder(): FixedSizeDecoder<VaultTransactionExecuteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getVaultTransactionExecuteInstructionDataCodec(): FixedSizeCodec<
  VaultTransactionExecuteInstructionDataArgs,
  VaultTransactionExecuteInstructionData
> {
  return combineCodec(
    getVaultTransactionExecuteInstructionDataEncoder(),
    getVaultTransactionExecuteInstructionDataDecoder()
  );
}

export type VaultTransactionExecuteInput<
  TAccountMultisig extends string = string,
  TAccountProposal extends string = string,
  TAccountTransaction extends string = string,
  TAccountMember extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  /** The proposal account associated with the transaction. */
  proposal: Address<TAccountProposal>;
  /** The transaction to execute. */
  transaction: Address<TAccountTransaction>;
  member: TransactionSigner<TAccountMember>;
};

export function getVaultTransactionExecuteInstruction<
  TAccountMultisig extends string,
  TAccountProposal extends string,
  TAccountTransaction extends string,
  TAccountMember extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: VaultTransactionExecuteInput<
    TAccountMultisig,
    TAccountProposal,
    TAccountTransaction,
    TAccountMember
  >,
  config?: { programAddress?: TProgramAddress }
): VaultTransactionExecuteInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountProposal,
  TAccountTransaction,
  TAccountMember
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: false },
    member: { value: input.member ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.member),
    ],
    programAddress,
    data: getVaultTransactionExecuteInstructionDataEncoder().encode({}),
  } as VaultTransactionExecuteInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountProposal,
    TAccountTransaction,
    TAccountMember
  >;

  return instruction;
}

export type ParsedVaultTransactionExecuteInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    /** The proposal account associated with the transaction. */
    proposal: TAccountMetas[1];
    /** The transaction to execute. */
    transaction: TAccountMetas[2];
    member: TAccountMetas[3];
  };
  data: VaultTransactionExecuteInstructionData;
};

export function parseVaultTransactionExecuteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVaultTransactionExecuteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      proposal: getNextAccount(),
      transaction: getNextAccount(),
      member: getNextAccount(),
    },
    data: getVaultTransactionExecuteInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
