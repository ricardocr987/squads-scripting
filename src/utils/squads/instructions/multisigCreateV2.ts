/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getMemberDecoder,
  getMemberEncoder,
  type Member,
  type MemberArgs,
} from '../types';

export const MULTISIG_CREATE_V2_DISCRIMINATOR = new Uint8Array([
  50, 221, 199, 93, 40, 245, 139, 233,
]);

export function getMultisigCreateV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MULTISIG_CREATE_V2_DISCRIMINATOR
  );
}

export type MultisigCreateV2Instruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountProgramConfig extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountCreateKey extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProgramConfig extends string
        ? ReadonlyAccount<TAccountProgramConfig>
        : TAccountProgramConfig,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountMultisig extends string
        ? WritableAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountCreateKey extends string
        ? ReadonlySignerAccount<TAccountCreateKey> &
            AccountSignerMeta<TAccountCreateKey>
        : TAccountCreateKey,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MultisigCreateV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  /**
   * The authority that can configure the multisig: add/remove members, change the threshold, etc.
   * Should be set to `None` for autonomous multisigs.
   */
  configAuthority: Option<Address>;
  /** The number of signatures required to execute a transaction. */
  threshold: number;
  /** The members of the multisig. */
  members: Array<Member>;
  /** How many seconds must pass between transaction voting, settlement, and execution. */
  timeLock: number;
  /**
   * The address where the rent for the accounts related to executed, rejected, or cancelled
   * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
   */
  rentCollector: Option<Address>;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type MultisigCreateV2InstructionDataArgs = {
  /**
   * The authority that can configure the multisig: add/remove members, change the threshold, etc.
   * Should be set to `None` for autonomous multisigs.
   */
  configAuthority: OptionOrNullable<Address>;
  /** The number of signatures required to execute a transaction. */
  threshold: number;
  /** The members of the multisig. */
  members: Array<MemberArgs>;
  /** How many seconds must pass between transaction voting, settlement, and execution. */
  timeLock: number;
  /**
   * The address where the rent for the accounts related to executed, rejected, or cancelled
   * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
   */
  rentCollector: OptionOrNullable<Address>;
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getMultisigCreateV2InstructionDataEncoder(): Encoder<MultisigCreateV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['configAuthority', getOptionEncoder(getAddressEncoder())],
      ['threshold', getU16Encoder()],
      ['members', getArrayEncoder(getMemberEncoder())],
      ['timeLock', getU32Encoder()],
      ['rentCollector', getOptionEncoder(getAddressEncoder())],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: MULTISIG_CREATE_V2_DISCRIMINATOR })
  );
}

export function getMultisigCreateV2InstructionDataDecoder(): Decoder<MultisigCreateV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['configAuthority', getOptionDecoder(getAddressDecoder())],
    ['threshold', getU16Decoder()],
    ['members', getArrayDecoder(getMemberDecoder())],
    ['timeLock', getU32Decoder()],
    ['rentCollector', getOptionDecoder(getAddressDecoder())],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getMultisigCreateV2InstructionDataCodec(): Codec<
  MultisigCreateV2InstructionDataArgs,
  MultisigCreateV2InstructionData
> {
  return combineCodec(
    getMultisigCreateV2InstructionDataEncoder(),
    getMultisigCreateV2InstructionDataDecoder()
  );
}

export type MultisigCreateV2Input<
  TAccountProgramConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountMultisig extends string = string,
  TAccountCreateKey extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Global program config account. */
  programConfig: Address<TAccountProgramConfig>;
  /** The treasury where the creation fee is transferred to. */
  treasury: Address<TAccountTreasury>;
  multisig: Address<TAccountMultisig>;
  /**
   * An ephemeral signer that is used as a seed for the Multisig PDA.
   * Must be a signer to prevent front-running attack by someone else but the original creator.
   */
  createKey: TransactionSigner<TAccountCreateKey>;
  /** The creator of the multisig. */
  creator: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  configAuthority: MultisigCreateV2InstructionDataArgs['configAuthority'];
  threshold: MultisigCreateV2InstructionDataArgs['threshold'];
  members: MultisigCreateV2InstructionDataArgs['members'];
  timeLock: MultisigCreateV2InstructionDataArgs['timeLock'];
  rentCollector: MultisigCreateV2InstructionDataArgs['rentCollector'];
  memo: MultisigCreateV2InstructionDataArgs['memo'];
};

export function getMultisigCreateV2Instruction<
  TAccountProgramConfig extends string,
  TAccountTreasury extends string,
  TAccountMultisig extends string,
  TAccountCreateKey extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: MultisigCreateV2Input<
    TAccountProgramConfig,
    TAccountTreasury,
    TAccountMultisig,
    TAccountCreateKey,
    TAccountCreator,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MultisigCreateV2Instruction<
  TProgramAddress,
  TAccountProgramConfig,
  TAccountTreasury,
  TAccountMultisig,
  TAccountCreateKey,
  TAccountCreator,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: true },
    multisig: { value: input.multisig ?? null, isWritable: true },
    createKey: { value: input.createKey ?? null, isWritable: false },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.createKey),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMultisigCreateV2InstructionDataEncoder().encode(
      args as MultisigCreateV2InstructionDataArgs
    ),
  } as MultisigCreateV2Instruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountTreasury,
    TAccountMultisig,
    TAccountCreateKey,
    TAccountCreator,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMultisigCreateV2Instruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Global program config account. */
    programConfig: TAccountMetas[0];
    /** The treasury where the creation fee is transferred to. */
    treasury: TAccountMetas[1];
    multisig: TAccountMetas[2];
    /**
     * An ephemeral signer that is used as a seed for the Multisig PDA.
     * Must be a signer to prevent front-running attack by someone else but the original creator.
     */

    createKey: TAccountMetas[3];
    /** The creator of the multisig. */
    creator: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: MultisigCreateV2InstructionData;
};

export function parseMultisigCreateV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMultisigCreateV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programConfig: getNextAccount(),
      treasury: getNextAccount(),
      multisig: getNextAccount(),
      createKey: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMultisigCreateV2InstructionDataDecoder().decode(instruction.data),
  };
}
