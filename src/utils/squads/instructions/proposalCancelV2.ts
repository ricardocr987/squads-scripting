/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getProposalVoteArgsDecoder,
  getProposalVoteArgsEncoder,
  type ProposalVoteArgs,
  type ProposalVoteArgsArgs,
} from '../types';

export const PROPOSAL_CANCEL_V2_DISCRIMINATOR = new Uint8Array([
  205, 41, 194, 61, 220, 139, 16, 247,
]);

export function getProposalCancelV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROPOSAL_CANCEL_V2_DISCRIMINATOR
  );
}

export type ProposalCancelV2Instruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? ReadonlyAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountMember extends string
        ? WritableSignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProposalCancelV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  args: ProposalVoteArgs;
};

export type ProposalCancelV2InstructionDataArgs = {
  args: ProposalVoteArgsArgs;
};

export function getProposalCancelV2InstructionDataEncoder(): Encoder<ProposalCancelV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getProposalVoteArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PROPOSAL_CANCEL_V2_DISCRIMINATOR })
  );
}

export function getProposalCancelV2InstructionDataDecoder(): Decoder<ProposalCancelV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getProposalVoteArgsDecoder()],
  ]);
}

export function getProposalCancelV2InstructionDataCodec(): Codec<
  ProposalCancelV2InstructionDataArgs,
  ProposalCancelV2InstructionData
> {
  return combineCodec(
    getProposalCancelV2InstructionDataEncoder(),
    getProposalCancelV2InstructionDataDecoder()
  );
}

export type ProposalCancelV2Input<
  TAccountMultisig extends string = string,
  TAccountMember extends string = string,
  TAccountProposal extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  member: TransactionSigner<TAccountMember>;
  proposal: Address<TAccountProposal>;
  systemProgram?: Address<TAccountSystemProgram>;
  args: ProposalCancelV2InstructionDataArgs['args'];
};

export function getProposalCancelV2Instruction<
  TAccountMultisig extends string,
  TAccountMember extends string,
  TAccountProposal extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ProposalCancelV2Input<
    TAccountMultisig,
    TAccountMember,
    TAccountProposal,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProposalCancelV2Instruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountMember,
  TAccountProposal,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: false },
    member: { value: input.member ?? null, isWritable: true },
    proposal: { value: input.proposal ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProposalCancelV2InstructionDataEncoder().encode(
      args as ProposalCancelV2InstructionDataArgs
    ),
  } as ProposalCancelV2Instruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountMember,
    TAccountProposal,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedProposalCancelV2Instruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    member: TAccountMetas[1];
    proposal: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: ProposalCancelV2InstructionData;
};

export function parseProposalCancelV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProposalCancelV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      member: getNextAccount(),
      proposal: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getProposalCancelV2InstructionDataDecoder().decode(instruction.data),
  };
}
