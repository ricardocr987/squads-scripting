/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getProposalVoteArgsDecoder,
  getProposalVoteArgsEncoder,
  type ProposalVoteArgs,
  type ProposalVoteArgsArgs,
} from '../types';

export const PROPOSAL_APPROVE_DISCRIMINATOR = new Uint8Array([
  144, 37, 164, 136, 188, 216, 42, 248,
]);

export function getProposalApproveDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROPOSAL_APPROVE_DISCRIMINATOR
  );
}

export type ProposalApproveInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? ReadonlyAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountMember extends string
        ? WritableSignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      ...TRemainingAccounts,
    ]
  >;

export type ProposalApproveInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: ProposalVoteArgs;
};

export type ProposalApproveInstructionDataArgs = { args: ProposalVoteArgsArgs };

export function getProposalApproveInstructionDataEncoder(): Encoder<ProposalApproveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getProposalVoteArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PROPOSAL_APPROVE_DISCRIMINATOR })
  );
}

export function getProposalApproveInstructionDataDecoder(): Decoder<ProposalApproveInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getProposalVoteArgsDecoder()],
  ]);
}

export function getProposalApproveInstructionDataCodec(): Codec<
  ProposalApproveInstructionDataArgs,
  ProposalApproveInstructionData
> {
  return combineCodec(
    getProposalApproveInstructionDataEncoder(),
    getProposalApproveInstructionDataDecoder()
  );
}

export type ProposalApproveInput<
  TAccountMultisig extends string = string,
  TAccountMember extends string = string,
  TAccountProposal extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  member: TransactionSigner<TAccountMember>;
  proposal: Address<TAccountProposal>;
  args: ProposalApproveInstructionDataArgs['args'];
};

export function getProposalApproveInstruction<
  TAccountMultisig extends string,
  TAccountMember extends string,
  TAccountProposal extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ProposalApproveInput<
    TAccountMultisig,
    TAccountMember,
    TAccountProposal
  >,
  config?: { programAddress?: TProgramAddress }
): ProposalApproveInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountMember,
  TAccountProposal
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: false },
    member: { value: input.member ?? null, isWritable: true },
    proposal: { value: input.proposal ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.proposal),
    ],
    programAddress,
    data: getProposalApproveInstructionDataEncoder().encode(
      args as ProposalApproveInstructionDataArgs
    ),
  } as ProposalApproveInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountMember,
    TAccountProposal
  >;

  return instruction;
}

export type ParsedProposalApproveInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    member: TAccountMetas[1];
    proposal: TAccountMetas[2];
  };
  data: ProposalApproveInstructionData;
};

export function parseProposalApproveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProposalApproveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      member: getNextAccount(),
      proposal: getNextAccount(),
    },
    data: getProposalApproveInstructionDataDecoder().decode(instruction.data),
  };
}
