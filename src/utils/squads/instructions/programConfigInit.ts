/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PROGRAM_CONFIG_INIT_DISCRIMINATOR = new Uint8Array([
  184, 188, 198, 195, 205, 124, 117, 216,
]);

export function getProgramConfigInitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROGRAM_CONFIG_INIT_DISCRIMINATOR
  );
}

export type ProgramConfigInitInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountProgramConfig extends string | AccountMeta<string> = string,
  TAccountInitializer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProgramConfig extends string
        ? WritableAccount<TAccountProgramConfig>
        : TAccountProgramConfig,
      TAccountInitializer extends string
        ? WritableSignerAccount<TAccountInitializer> &
            AccountSignerMeta<TAccountInitializer>
        : TAccountInitializer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProgramConfigInitInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** The authority that can configure the program config: change the treasury, etc. */
  authority: Address;
  /** The fee that is charged for creating a new multisig. */
  multisigCreationFee: bigint;
  /** The treasury where the creation fee is transferred to. */
  treasury: Address;
};

export type ProgramConfigInitInstructionDataArgs = {
  /** The authority that can configure the program config: change the treasury, etc. */
  authority: Address;
  /** The fee that is charged for creating a new multisig. */
  multisigCreationFee: number | bigint;
  /** The treasury where the creation fee is transferred to. */
  treasury: Address;
};

export function getProgramConfigInitInstructionDataEncoder(): FixedSizeEncoder<ProgramConfigInitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['multisigCreationFee', getU64Encoder()],
      ['treasury', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PROGRAM_CONFIG_INIT_DISCRIMINATOR })
  );
}

export function getProgramConfigInitInstructionDataDecoder(): FixedSizeDecoder<ProgramConfigInitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['multisigCreationFee', getU64Decoder()],
    ['treasury', getAddressDecoder()],
  ]);
}

export function getProgramConfigInitInstructionDataCodec(): FixedSizeCodec<
  ProgramConfigInitInstructionDataArgs,
  ProgramConfigInitInstructionData
> {
  return combineCodec(
    getProgramConfigInitInstructionDataEncoder(),
    getProgramConfigInitInstructionDataDecoder()
  );
}

export type ProgramConfigInitInput<
  TAccountProgramConfig extends string = string,
  TAccountInitializer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  programConfig: Address<TAccountProgramConfig>;
  /** The hard-coded account that is used to initialize the program config once. */
  initializer: TransactionSigner<TAccountInitializer>;
  systemProgram?: Address<TAccountSystemProgram>;
  authority: ProgramConfigInitInstructionDataArgs['authority'];
  multisigCreationFee: ProgramConfigInitInstructionDataArgs['multisigCreationFee'];
  treasury: ProgramConfigInitInstructionDataArgs['treasury'];
};

export function getProgramConfigInitInstruction<
  TAccountProgramConfig extends string,
  TAccountInitializer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ProgramConfigInitInput<
    TAccountProgramConfig,
    TAccountInitializer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProgramConfigInitInstruction<
  TProgramAddress,
  TAccountProgramConfig,
  TAccountInitializer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: true },
    initializer: { value: input.initializer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.initializer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProgramConfigInitInstructionDataEncoder().encode(
      args as ProgramConfigInitInstructionDataArgs
    ),
  } as ProgramConfigInitInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountInitializer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedProgramConfigInitInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    programConfig: TAccountMetas[0];
    /** The hard-coded account that is used to initialize the program config once. */
    initializer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: ProgramConfigInitInstructionData;
};

export function parseProgramConfigInitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProgramConfigInitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programConfig: getNextAccount(),
      initializer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getProgramConfigInitInstructionDataDecoder().decode(instruction.data),
  };
}
