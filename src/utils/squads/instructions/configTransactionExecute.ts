/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CONFIG_TRANSACTION_EXECUTE_DISCRIMINATOR = new Uint8Array([
  114, 146, 244, 189, 252, 140, 36, 40,
]);

export function getConfigTransactionExecuteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONFIG_TRANSACTION_EXECUTE_DISCRIMINATOR
  );
}

export type ConfigTransactionExecuteInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountMember extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountTransaction extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? WritableAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountMember extends string
        ? ReadonlySignerAccount<TAccountMember> &
            AccountSignerMeta<TAccountMember>
        : TAccountMember,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountTransaction extends string
        ? ReadonlyAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ConfigTransactionExecuteInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ConfigTransactionExecuteInstructionDataArgs = {};

export function getConfigTransactionExecuteInstructionDataEncoder(): FixedSizeEncoder<ConfigTransactionExecuteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CONFIG_TRANSACTION_EXECUTE_DISCRIMINATOR,
    })
  );
}

export function getConfigTransactionExecuteInstructionDataDecoder(): FixedSizeDecoder<ConfigTransactionExecuteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getConfigTransactionExecuteInstructionDataCodec(): FixedSizeCodec<
  ConfigTransactionExecuteInstructionDataArgs,
  ConfigTransactionExecuteInstructionData
> {
  return combineCodec(
    getConfigTransactionExecuteInstructionDataEncoder(),
    getConfigTransactionExecuteInstructionDataDecoder()
  );
}

export type ConfigTransactionExecuteInput<
  TAccountMultisig extends string = string,
  TAccountMember extends string = string,
  TAccountProposal extends string = string,
  TAccountTransaction extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The multisig account that owns the transaction. */
  multisig: Address<TAccountMultisig>;
  /** One of the multisig members with `Execute` permission. */
  member: TransactionSigner<TAccountMember>;
  /** The proposal account associated with the transaction. */
  proposal: Address<TAccountProposal>;
  /** The transaction to execute. */
  transaction: Address<TAccountTransaction>;
  /**
   * The account that will be charged/credited in case the config transaction causes space reallocation,
   * for example when adding a new member, adding or removing a spending limit.
   * This is usually the same as `member`, but can be a different account if needed.
   */
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  /** We might need it in case reallocation is needed. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getConfigTransactionExecuteInstruction<
  TAccountMultisig extends string,
  TAccountMember extends string,
  TAccountProposal extends string,
  TAccountTransaction extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: ConfigTransactionExecuteInput<
    TAccountMultisig,
    TAccountMember,
    TAccountProposal,
    TAccountTransaction,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ConfigTransactionExecuteInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountMember,
  TAccountProposal,
  TAccountTransaction,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
    member: { value: input.member ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.member),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getConfigTransactionExecuteInstructionDataEncoder().encode({}),
  } as ConfigTransactionExecuteInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountMember,
    TAccountProposal,
    TAccountTransaction,
    TAccountRentPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedConfigTransactionExecuteInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The multisig account that owns the transaction. */
    multisig: TAccountMetas[0];
    /** One of the multisig members with `Execute` permission. */
    member: TAccountMetas[1];
    /** The proposal account associated with the transaction. */
    proposal: TAccountMetas[2];
    /** The transaction to execute. */
    transaction: TAccountMetas[3];
    /**
     * The account that will be charged/credited in case the config transaction causes space reallocation,
     * for example when adding a new member, adding or removing a spending limit.
     * This is usually the same as `member`, but can be a different account if needed.
     */

    rentPayer?: TAccountMetas[4] | undefined;
    /** We might need it in case reallocation is needed. */
    systemProgram?: TAccountMetas[5] | undefined;
  };
  data: ConfigTransactionExecuteInstructionData;
};

export function parseConfigTransactionExecuteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedConfigTransactionExecuteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      member: getNextAccount(),
      proposal: getNextAccount(),
      transaction: getNextAccount(),
      rentPayer: getNextOptionalAccount(),
      systemProgram: getNextOptionalAccount(),
    },
    data: getConfigTransactionExecuteInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
