/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BATCH_CREATE_DISCRIMINATOR = new Uint8Array([
  194, 142, 141, 17, 55, 185, 20, 248,
]);

export function getBatchCreateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BATCH_CREATE_DISCRIMINATOR
  );
}

export type BatchCreateInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMultisig extends string | AccountMeta<string> = string,
  TAccountBatch extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMultisig extends string
        ? WritableAccount<TAccountMultisig>
        : TAccountMultisig,
      TAccountBatch extends string
        ? WritableAccount<TAccountBatch>
        : TAccountBatch,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BatchCreateInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Index of the vault this transaction belongs to. */
  vaultIndex: number;
  memo: Option<string>;
};

export type BatchCreateInstructionDataArgs = {
  /** Index of the vault this transaction belongs to. */
  vaultIndex: number;
  memo: OptionOrNullable<string>;
};

export function getBatchCreateInstructionDataEncoder(): Encoder<BatchCreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['vaultIndex', getU8Encoder()],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: BATCH_CREATE_DISCRIMINATOR })
  );
}

export function getBatchCreateInstructionDataDecoder(): Decoder<BatchCreateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['vaultIndex', getU8Decoder()],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getBatchCreateInstructionDataCodec(): Codec<
  BatchCreateInstructionDataArgs,
  BatchCreateInstructionData
> {
  return combineCodec(
    getBatchCreateInstructionDataEncoder(),
    getBatchCreateInstructionDataDecoder()
  );
}

export type BatchCreateInput<
  TAccountMultisig extends string = string,
  TAccountBatch extends string = string,
  TAccountCreator extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  multisig: Address<TAccountMultisig>;
  batch: Address<TAccountBatch>;
  /** The member of the multisig that is creating the batch. */
  creator: TransactionSigner<TAccountCreator>;
  /** The payer for the batch account rent. */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  vaultIndex: BatchCreateInstructionDataArgs['vaultIndex'];
  memo: BatchCreateInstructionDataArgs['memo'];
};

export function getBatchCreateInstruction<
  TAccountMultisig extends string,
  TAccountBatch extends string,
  TAccountCreator extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
>(
  input: BatchCreateInput<
    TAccountMultisig,
    TAccountBatch,
    TAccountCreator,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BatchCreateInstruction<
  TProgramAddress,
  TAccountMultisig,
  TAccountBatch,
  TAccountCreator,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    multisig: { value: input.multisig ?? null, isWritable: true },
    batch: { value: input.batch ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.multisig),
      getAccountMeta(accounts.batch),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBatchCreateInstructionDataEncoder().encode(
      args as BatchCreateInstructionDataArgs
    ),
  } as BatchCreateInstruction<
    TProgramAddress,
    TAccountMultisig,
    TAccountBatch,
    TAccountCreator,
    TAccountRentPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedBatchCreateInstruction<
  TProgram extends string = typeof SQUADS_MULTISIG_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    multisig: TAccountMetas[0];
    batch: TAccountMetas[1];
    /** The member of the multisig that is creating the batch. */
    creator: TAccountMetas[2];
    /** The payer for the batch account rent. */
    rentPayer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: BatchCreateInstructionData;
};

export function parseBatchCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBatchCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      multisig: getNextAccount(),
      batch: getNextAccount(),
      creator: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBatchCreateInstructionDataDecoder().decode(instruction.data),
  };
}
