/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getConfigActionDecoder,
  getConfigActionEncoder,
  type ConfigAction,
  type ConfigActionArgs,
} from '../types';

export const CONFIG_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  94, 8, 4, 35, 113, 139, 139, 112,
]);

export function getConfigTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONFIG_TRANSACTION_DISCRIMINATOR
  );
}

export type ConfigTransaction = {
  discriminator: ReadonlyUint8Array;
  /** The multisig this belongs to. */
  multisig: Address;
  /** Member of the Multisig who submitted the transaction. */
  creator: Address;
  /** Index of this transaction within the multisig. */
  index: bigint;
  /** bump for the transaction seeds. */
  bump: number;
  /** Action to be performed on the multisig. */
  actions: Array<ConfigAction>;
};

export type ConfigTransactionArgs = {
  /** The multisig this belongs to. */
  multisig: Address;
  /** Member of the Multisig who submitted the transaction. */
  creator: Address;
  /** Index of this transaction within the multisig. */
  index: number | bigint;
  /** bump for the transaction seeds. */
  bump: number;
  /** Action to be performed on the multisig. */
  actions: Array<ConfigActionArgs>;
};

export function getConfigTransactionEncoder(): Encoder<ConfigTransactionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['multisig', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['index', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['actions', getArrayEncoder(getConfigActionEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CONFIG_TRANSACTION_DISCRIMINATOR })
  );
}

export function getConfigTransactionDecoder(): Decoder<ConfigTransaction> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['multisig', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['index', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['actions', getArrayDecoder(getConfigActionDecoder())],
  ]);
}

export function getConfigTransactionCodec(): Codec<
  ConfigTransactionArgs,
  ConfigTransaction
> {
  return combineCodec(
    getConfigTransactionEncoder(),
    getConfigTransactionDecoder()
  );
}

export function decodeConfigTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ConfigTransaction, TAddress>;
export function decodeConfigTransaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ConfigTransaction, TAddress>;
export function decodeConfigTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ConfigTransaction, TAddress>
  | MaybeAccount<ConfigTransaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConfigTransactionDecoder()
  );
}

export async function fetchConfigTransaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ConfigTransaction, TAddress>> {
  const maybeAccount = await fetchMaybeConfigTransaction(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConfigTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ConfigTransaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeConfigTransaction(maybeAccount);
}

export async function fetchAllConfigTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ConfigTransaction>[]> {
  const maybeAccounts = await fetchAllMaybeConfigTransaction(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeConfigTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ConfigTransaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeConfigTransaction(maybeAccount)
  );
}
