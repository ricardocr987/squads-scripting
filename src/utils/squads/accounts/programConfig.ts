/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PROGRAM_CONFIG_DISCRIMINATOR = new Uint8Array([
  196, 210, 90, 231, 144, 149, 140, 63,
]);

export function getProgramConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROGRAM_CONFIG_DISCRIMINATOR
  );
}

export type ProgramConfig = {
  discriminator: ReadonlyUint8Array;
  /** The authority which can update the config. */
  authority: Address;
  /**
   * The lamports amount charged for creating a new multisig account.
   * This fee is sent to the `treasury` account.
   */
  multisigCreationFee: bigint;
  /** The treasury account to send charged fees to. */
  treasury: Address;
  /** Reserved for future use. */
  reserved: ReadonlyUint8Array;
};

export type ProgramConfigArgs = {
  /** The authority which can update the config. */
  authority: Address;
  /**
   * The lamports amount charged for creating a new multisig account.
   * This fee is sent to the `treasury` account.
   */
  multisigCreationFee: number | bigint;
  /** The treasury account to send charged fees to. */
  treasury: Address;
  /** Reserved for future use. */
  reserved: ReadonlyUint8Array;
};

export function getProgramConfigEncoder(): FixedSizeEncoder<ProgramConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['multisigCreationFee', getU64Encoder()],
      ['treasury', getAddressEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 64)],
    ]),
    (value) => ({ ...value, discriminator: PROGRAM_CONFIG_DISCRIMINATOR })
  );
}

export function getProgramConfigDecoder(): FixedSizeDecoder<ProgramConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['multisigCreationFee', getU64Decoder()],
    ['treasury', getAddressDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getProgramConfigCodec(): FixedSizeCodec<
  ProgramConfigArgs,
  ProgramConfig
> {
  return combineCodec(getProgramConfigEncoder(), getProgramConfigDecoder());
}

export function decodeProgramConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProgramConfig, TAddress>;
export function decodeProgramConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProgramConfig, TAddress>;
export function decodeProgramConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProgramConfig, TAddress> | MaybeAccount<ProgramConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProgramConfigDecoder()
  );
}

export async function fetchProgramConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProgramConfig, TAddress>> {
  const maybeAccount = await fetchMaybeProgramConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProgramConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProgramConfig(maybeAccount);
}

export async function fetchAllProgramConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProgramConfig>[]> {
  const maybeAccounts = await fetchAllMaybeProgramConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProgramConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProgramConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProgramConfig(maybeAccount));
}

export function getProgramConfigSize(): number {
  return 144;
}
