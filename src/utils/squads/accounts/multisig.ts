/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getMemberDecoder,
  getMemberEncoder,
  type Member,
  type MemberArgs,
} from '../types';

export const MULTISIG_DISCRIMINATOR = new Uint8Array([
  224, 116, 121, 186, 68, 161, 79, 236,
]);

export function getMultisigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MULTISIG_DISCRIMINATOR);
}

export type Multisig = {
  discriminator: ReadonlyUint8Array;
  /** Key that is used to seed the multisig PDA. */
  createKey: Address;
  /**
   * The authority that can change the multisig config.
   * This is a very important parameter as this authority can change the members and threshold.
   *
   * The convention is to set this to `Pubkey::default()`.
   * In this case, the multisig becomes autonomous, so every config change goes through
   * the normal process of voting by the members.
   *
   * However, if this parameter is set to any other key, all the config changes for this multisig
   * will need to be signed by the `config_authority`. We call such a multisig a "controlled multisig".
   */
  configAuthority: Address;
  /** Threshold for signatures. */
  threshold: number;
  /** How many seconds must pass between transaction voting settlement and execution. */
  timeLock: number;
  /** Last transaction index. 0 means no transactions have been created. */
  transactionIndex: bigint;
  /**
   * Last stale transaction index. All transactions up until this index are stale.
   * This index is updated when multisig config (members/threshold/time_lock) changes.
   */
  staleTransactionIndex: bigint;
  /**
   * The address where the rent for the accounts related to executed, rejected, or cancelled
   * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
   */
  rentCollector: Option<Address>;
  /** Bump for the multisig PDA seed. */
  bump: number;
  /** Members of the multisig. */
  members: Array<Member>;
};

export type MultisigArgs = {
  /** Key that is used to seed the multisig PDA. */
  createKey: Address;
  /**
   * The authority that can change the multisig config.
   * This is a very important parameter as this authority can change the members and threshold.
   *
   * The convention is to set this to `Pubkey::default()`.
   * In this case, the multisig becomes autonomous, so every config change goes through
   * the normal process of voting by the members.
   *
   * However, if this parameter is set to any other key, all the config changes for this multisig
   * will need to be signed by the `config_authority`. We call such a multisig a "controlled multisig".
   */
  configAuthority: Address;
  /** Threshold for signatures. */
  threshold: number;
  /** How many seconds must pass between transaction voting settlement and execution. */
  timeLock: number;
  /** Last transaction index. 0 means no transactions have been created. */
  transactionIndex: number | bigint;
  /**
   * Last stale transaction index. All transactions up until this index are stale.
   * This index is updated when multisig config (members/threshold/time_lock) changes.
   */
  staleTransactionIndex: number | bigint;
  /**
   * The address where the rent for the accounts related to executed, rejected, or cancelled
   * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
   */
  rentCollector: OptionOrNullable<Address>;
  /** Bump for the multisig PDA seed. */
  bump: number;
  /** Members of the multisig. */
  members: Array<MemberArgs>;
};

export function getMultisigEncoder(): Encoder<MultisigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['createKey', getAddressEncoder()],
      ['configAuthority', getAddressEncoder()],
      ['threshold', getU16Encoder()],
      ['timeLock', getU32Encoder()],
      ['transactionIndex', getU64Encoder()],
      ['staleTransactionIndex', getU64Encoder()],
      ['rentCollector', getOptionEncoder(getAddressEncoder())],
      ['bump', getU8Encoder()],
      ['members', getArrayEncoder(getMemberEncoder())],
    ]),
    (value) => ({ ...value, discriminator: MULTISIG_DISCRIMINATOR })
  );
}

export function getMultisigDecoder(): Decoder<Multisig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['createKey', getAddressDecoder()],
    ['configAuthority', getAddressDecoder()],
    ['threshold', getU16Decoder()],
    ['timeLock', getU32Decoder()],
    ['transactionIndex', getU64Decoder()],
    ['staleTransactionIndex', getU64Decoder()],
    ['rentCollector', getOptionDecoder(getAddressDecoder())],
    ['bump', getU8Decoder()],
    ['members', getArrayDecoder(getMemberDecoder())],
  ]);
}

export function getMultisigCodec(): Codec<MultisigArgs, Multisig> {
  return combineCodec(getMultisigEncoder(), getMultisigDecoder());
}

export function decodeMultisig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Multisig, TAddress>;
export function decodeMultisig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Multisig, TAddress>;
export function decodeMultisig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Multisig, TAddress> | MaybeAccount<Multisig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMultisigDecoder()
  );
}

export async function fetchMultisig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Multisig, TAddress>> {
  const maybeAccount = await fetchMaybeMultisig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMultisig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Multisig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMultisig(maybeAccount);
}

export async function fetchAllMultisig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Multisig>[]> {
  const maybeAccounts = await fetchAllMaybeMultisig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMultisig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Multisig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMultisig(maybeAccount));
}
