/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getPeriodDecoder,
  getPeriodEncoder,
  type Period,
  type PeriodArgs,
} from '../types';

export const SPENDING_LIMIT_DISCRIMINATOR = new Uint8Array([
  10, 201, 27, 160, 218, 195, 222, 152,
]);

export function getSpendingLimitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SPENDING_LIMIT_DISCRIMINATOR
  );
}

export type SpendingLimit = {
  discriminator: ReadonlyUint8Array;
  /** The multisig this belongs to. */
  multisig: Address;
  /** Key that is used to seed the SpendingLimit PDA. */
  createKey: Address;
  /** The index of the vault that the spending limit is for. */
  vaultIndex: number;
  /**
   * The token mint the spending limit is for.
   * Pubkey::default() means SOL.
   * use NATIVE_MINT for Wrapped SOL.
   */
  mint: Address;
  /**
   * The amount of tokens that can be spent in a period.
   * This amount is in decimals of the mint,
   * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
   */
  amount: bigint;
  /**
   * The reset period of the spending limit.
   * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
   */
  period: Period;
  /**
   * The remaining amount of tokens that can be spent in the current period.
   * When reaches 0, the spending limit cannot be used anymore until the period reset.
   */
  remainingAmount: bigint;
  /** Unix timestamp marking the last time the spending limit was reset (or created). */
  lastReset: bigint;
  /** PDA bump. */
  bump: number;
  /**
   * Members of the multisig that can use the spending limit.
   * In case a member is removed from the multisig, the spending limit will remain existent
   * (until explicitly deleted), but the removed member will not be able to use it anymore.
   */
  members: Array<Address>;
  /**
   * The destination addresses the spending limit is allowed to sent funds to.
   * If empty, funds can be sent to any address.
   */
  destinations: Array<Address>;
};

export type SpendingLimitArgs = {
  /** The multisig this belongs to. */
  multisig: Address;
  /** Key that is used to seed the SpendingLimit PDA. */
  createKey: Address;
  /** The index of the vault that the spending limit is for. */
  vaultIndex: number;
  /**
   * The token mint the spending limit is for.
   * Pubkey::default() means SOL.
   * use NATIVE_MINT for Wrapped SOL.
   */
  mint: Address;
  /**
   * The amount of tokens that can be spent in a period.
   * This amount is in decimals of the mint,
   * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
   */
  amount: number | bigint;
  /**
   * The reset period of the spending limit.
   * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
   */
  period: PeriodArgs;
  /**
   * The remaining amount of tokens that can be spent in the current period.
   * When reaches 0, the spending limit cannot be used anymore until the period reset.
   */
  remainingAmount: number | bigint;
  /** Unix timestamp marking the last time the spending limit was reset (or created). */
  lastReset: number | bigint;
  /** PDA bump. */
  bump: number;
  /**
   * Members of the multisig that can use the spending limit.
   * In case a member is removed from the multisig, the spending limit will remain existent
   * (until explicitly deleted), but the removed member will not be able to use it anymore.
   */
  members: Array<Address>;
  /**
   * The destination addresses the spending limit is allowed to sent funds to.
   * If empty, funds can be sent to any address.
   */
  destinations: Array<Address>;
};

export function getSpendingLimitEncoder(): Encoder<SpendingLimitArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['multisig', getAddressEncoder()],
      ['createKey', getAddressEncoder()],
      ['vaultIndex', getU8Encoder()],
      ['mint', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['period', getPeriodEncoder()],
      ['remainingAmount', getU64Encoder()],
      ['lastReset', getI64Encoder()],
      ['bump', getU8Encoder()],
      ['members', getArrayEncoder(getAddressEncoder())],
      ['destinations', getArrayEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: SPENDING_LIMIT_DISCRIMINATOR })
  );
}

export function getSpendingLimitDecoder(): Decoder<SpendingLimit> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['multisig', getAddressDecoder()],
    ['createKey', getAddressDecoder()],
    ['vaultIndex', getU8Decoder()],
    ['mint', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['period', getPeriodDecoder()],
    ['remainingAmount', getU64Decoder()],
    ['lastReset', getI64Decoder()],
    ['bump', getU8Decoder()],
    ['members', getArrayDecoder(getAddressDecoder())],
    ['destinations', getArrayDecoder(getAddressDecoder())],
  ]);
}

export function getSpendingLimitCodec(): Codec<
  SpendingLimitArgs,
  SpendingLimit
> {
  return combineCodec(getSpendingLimitEncoder(), getSpendingLimitDecoder());
}

export function decodeSpendingLimit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<SpendingLimit, TAddress>;
export function decodeSpendingLimit<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<SpendingLimit, TAddress>;
export function decodeSpendingLimit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<SpendingLimit, TAddress> | MaybeAccount<SpendingLimit, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSpendingLimitDecoder()
  );
}

export async function fetchSpendingLimit<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<SpendingLimit, TAddress>> {
  const maybeAccount = await fetchMaybeSpendingLimit(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSpendingLimit<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<SpendingLimit, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSpendingLimit(maybeAccount);
}

export async function fetchAllSpendingLimit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<SpendingLimit>[]> {
  const maybeAccounts = await fetchAllMaybeSpendingLimit(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSpendingLimit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<SpendingLimit>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSpendingLimit(maybeAccount));
}
