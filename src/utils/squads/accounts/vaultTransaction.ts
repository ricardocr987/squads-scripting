/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getVaultTransactionMessageDecoder,
  getVaultTransactionMessageEncoder,
  type VaultTransactionMessage,
  type VaultTransactionMessageArgs,
} from '../types';

export const VAULT_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  168, 250, 162, 100, 81, 14, 162, 207,
]);

export function getVaultTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VAULT_TRANSACTION_DISCRIMINATOR
  );
}

export type VaultTransaction = {
  discriminator: ReadonlyUint8Array;
  /** The multisig this belongs to. */
  multisig: Address;
  /** Member of the Multisig who submitted the transaction. */
  creator: Address;
  /** Index of this transaction within the multisig. */
  index: bigint;
  /** bump for the transaction seeds. */
  bump: number;
  /** Index of the vault this transaction belongs to. */
  vaultIndex: number;
  /** Derivation bump of the vault PDA this transaction belongs to. */
  vaultBump: number;
  /**
   * Derivation bumps for additional signers.
   * Some transactions require multiple signers. Often these additional signers are "ephemeral" keypairs
   * that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.
   * When wrapping such transactions into multisig ones, we replace these "ephemeral" signing keypairs
   * with PDAs derived from the MultisigTransaction's `transaction_index` and controlled by the Multisig Program;
   * during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,
   * thus "signing" on behalf of these PDAs.
   */
  ephemeralSignerBumps: ReadonlyUint8Array;
  /** data required for executing the transaction. */
  message: VaultTransactionMessage;
};

export type VaultTransactionArgs = {
  /** The multisig this belongs to. */
  multisig: Address;
  /** Member of the Multisig who submitted the transaction. */
  creator: Address;
  /** Index of this transaction within the multisig. */
  index: number | bigint;
  /** bump for the transaction seeds. */
  bump: number;
  /** Index of the vault this transaction belongs to. */
  vaultIndex: number;
  /** Derivation bump of the vault PDA this transaction belongs to. */
  vaultBump: number;
  /**
   * Derivation bumps for additional signers.
   * Some transactions require multiple signers. Often these additional signers are "ephemeral" keypairs
   * that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.
   * When wrapping such transactions into multisig ones, we replace these "ephemeral" signing keypairs
   * with PDAs derived from the MultisigTransaction's `transaction_index` and controlled by the Multisig Program;
   * during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,
   * thus "signing" on behalf of these PDAs.
   */
  ephemeralSignerBumps: ReadonlyUint8Array;
  /** data required for executing the transaction. */
  message: VaultTransactionMessageArgs;
};

export function getVaultTransactionEncoder(): Encoder<VaultTransactionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['multisig', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['index', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['vaultIndex', getU8Encoder()],
      ['vaultBump', getU8Encoder()],
      [
        'ephemeralSignerBumps',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
      ['message', getVaultTransactionMessageEncoder()],
    ]),
    (value) => ({ ...value, discriminator: VAULT_TRANSACTION_DISCRIMINATOR })
  );
}

export function getVaultTransactionDecoder(): Decoder<VaultTransaction> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['multisig', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['index', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['vaultIndex', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
    [
      'ephemeralSignerBumps',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
    ['message', getVaultTransactionMessageDecoder()],
  ]);
}

export function getVaultTransactionCodec(): Codec<
  VaultTransactionArgs,
  VaultTransaction
> {
  return combineCodec(
    getVaultTransactionEncoder(),
    getVaultTransactionDecoder()
  );
}

export function decodeVaultTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VaultTransaction, TAddress>;
export function decodeVaultTransaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VaultTransaction, TAddress>;
export function decodeVaultTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<VaultTransaction, TAddress>
  | MaybeAccount<VaultTransaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultTransactionDecoder()
  );
}

export async function fetchVaultTransaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VaultTransaction, TAddress>> {
  const maybeAccount = await fetchMaybeVaultTransaction(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVaultTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VaultTransaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVaultTransaction(maybeAccount);
}

export async function fetchAllVaultTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VaultTransaction>[]> {
  const maybeAccounts = await fetchAllMaybeVaultTransaction(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVaultTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VaultTransaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVaultTransaction(maybeAccount)
  );
}
