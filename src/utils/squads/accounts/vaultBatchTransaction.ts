/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getVaultTransactionMessageDecoder,
  getVaultTransactionMessageEncoder,
  type VaultTransactionMessage,
  type VaultTransactionMessageArgs,
} from '../types';

export const VAULT_BATCH_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  196, 121, 46, 36, 12, 19, 252, 7,
]);

export function getVaultBatchTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VAULT_BATCH_TRANSACTION_DISCRIMINATOR
  );
}

export type VaultBatchTransaction = {
  discriminator: ReadonlyUint8Array;
  /** PDA bump. */
  bump: number;
  /**
   * Derivation bumps for additional signers.
   * Some transactions require multiple signers. Often these additional signers are "ephemeral" keypairs
   * that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.
   * When wrapping such transactions into multisig ones, we replace these "ephemeral" signing keypairs
   * with PDAs derived from the transaction's `transaction_index` and controlled by the Multisig Program;
   * during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,
   * thus "signing" on behalf of these PDAs.
   */
  ephemeralSignerBumps: ReadonlyUint8Array;
  /** data required for executing the transaction. */
  message: VaultTransactionMessage;
};

export type VaultBatchTransactionArgs = {
  /** PDA bump. */
  bump: number;
  /**
   * Derivation bumps for additional signers.
   * Some transactions require multiple signers. Often these additional signers are "ephemeral" keypairs
   * that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.
   * When wrapping such transactions into multisig ones, we replace these "ephemeral" signing keypairs
   * with PDAs derived from the transaction's `transaction_index` and controlled by the Multisig Program;
   * during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,
   * thus "signing" on behalf of these PDAs.
   */
  ephemeralSignerBumps: ReadonlyUint8Array;
  /** data required for executing the transaction. */
  message: VaultTransactionMessageArgs;
};

export function getVaultBatchTransactionEncoder(): Encoder<VaultBatchTransactionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      [
        'ephemeralSignerBumps',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
      ['message', getVaultTransactionMessageEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: VAULT_BATCH_TRANSACTION_DISCRIMINATOR,
    })
  );
}

export function getVaultBatchTransactionDecoder(): Decoder<VaultBatchTransaction> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    [
      'ephemeralSignerBumps',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
    ['message', getVaultTransactionMessageDecoder()],
  ]);
}

export function getVaultBatchTransactionCodec(): Codec<
  VaultBatchTransactionArgs,
  VaultBatchTransaction
> {
  return combineCodec(
    getVaultBatchTransactionEncoder(),
    getVaultBatchTransactionDecoder()
  );
}

export function decodeVaultBatchTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VaultBatchTransaction, TAddress>;
export function decodeVaultBatchTransaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VaultBatchTransaction, TAddress>;
export function decodeVaultBatchTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<VaultBatchTransaction, TAddress>
  | MaybeAccount<VaultBatchTransaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultBatchTransactionDecoder()
  );
}

export async function fetchVaultBatchTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VaultBatchTransaction, TAddress>> {
  const maybeAccount = await fetchMaybeVaultBatchTransaction(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVaultBatchTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VaultBatchTransaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVaultBatchTransaction(maybeAccount);
}

export async function fetchAllVaultBatchTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VaultBatchTransaction>[]> {
  const maybeAccounts = await fetchAllMaybeVaultBatchTransaction(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVaultBatchTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VaultBatchTransaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVaultBatchTransaction(maybeAccount)
  );
}
