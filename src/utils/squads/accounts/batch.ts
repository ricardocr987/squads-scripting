/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const BATCH_DISCRIMINATOR = new Uint8Array([
  156, 194, 70, 44, 22, 88, 137, 44,
]);

export function getBatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BATCH_DISCRIMINATOR);
}

export type Batch = {
  discriminator: ReadonlyUint8Array;
  /** The multisig this belongs to. */
  multisig: Address;
  /** Member of the Multisig who submitted the batch. */
  creator: Address;
  /** Index of this batch within the multisig transactions. */
  index: bigint;
  /** PDA bump. */
  bump: number;
  /** Index of the vault this batch belongs to. */
  vaultIndex: number;
  /** Derivation bump of the vault PDA this batch belongs to. */
  vaultBump: number;
  /** Number of transactions in the batch. */
  size: number;
  /**
   * Index of the last executed transaction within the batch.
   * 0 means that no transactions have been executed yet.
   */
  executedTransactionIndex: number;
};

export type BatchArgs = {
  /** The multisig this belongs to. */
  multisig: Address;
  /** Member of the Multisig who submitted the batch. */
  creator: Address;
  /** Index of this batch within the multisig transactions. */
  index: number | bigint;
  /** PDA bump. */
  bump: number;
  /** Index of the vault this batch belongs to. */
  vaultIndex: number;
  /** Derivation bump of the vault PDA this batch belongs to. */
  vaultBump: number;
  /** Number of transactions in the batch. */
  size: number;
  /**
   * Index of the last executed transaction within the batch.
   * 0 means that no transactions have been executed yet.
   */
  executedTransactionIndex: number;
};

export function getBatchEncoder(): FixedSizeEncoder<BatchArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['multisig', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['index', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['vaultIndex', getU8Encoder()],
      ['vaultBump', getU8Encoder()],
      ['size', getU32Encoder()],
      ['executedTransactionIndex', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: BATCH_DISCRIMINATOR })
  );
}

export function getBatchDecoder(): FixedSizeDecoder<Batch> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['multisig', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['index', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['vaultIndex', getU8Decoder()],
    ['vaultBump', getU8Decoder()],
    ['size', getU32Decoder()],
    ['executedTransactionIndex', getU32Decoder()],
  ]);
}

export function getBatchCodec(): FixedSizeCodec<BatchArgs, Batch> {
  return combineCodec(getBatchEncoder(), getBatchDecoder());
}

export function decodeBatch<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Batch, TAddress>;
export function decodeBatch<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Batch, TAddress>;
export function decodeBatch<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Batch, TAddress> | MaybeAccount<Batch, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBatchDecoder()
  );
}

export async function fetchBatch<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Batch, TAddress>> {
  const maybeAccount = await fetchMaybeBatch(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBatch<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Batch, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBatch(maybeAccount);
}

export async function fetchAllBatch(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Batch>[]> {
  const maybeAccounts = await fetchAllMaybeBatch(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBatch(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Batch>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeBatch(maybeAccount));
}

export function getBatchSize(): number {
  return 91;
}
